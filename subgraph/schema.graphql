enum RoundStatus {
  OPEN
  DRAWING
  REVEALED
  CANCELLED
}

type Game @entity {
  "'ptb'"
  id: ID!
  ethEarned: BigInt!
  looksEarned: BigInt!
  usdEarned: BigInt!
  usdVolume: BigInt!
  roundsPlayed: BigInt!
}

type GameDailyData @entity {
  "'ptb-' + day timestamp"
  id: ID!
  "Timestamp of the start of the UTC day"
  timestamp: BigInt!
  ethEarned: BigInt!
  looksEarned: BigInt!
  usdEarned: BigInt!
  usdVolume: BigInt!
  roundsPlayed: BigInt!
  "Sum of the data saved in the previous and current days"
  cumulatedLooksEarned: BigInt!
  cumulatedEthEarned: BigInt!
  cumulatedUsdEarned: BigInt!
  cumulatedRoundsPlayed: BigInt!
}

type Cave @entity {
  id: ID! # uint256
  prizeAmount: BigInt! # uint256
  enterAmount: BigInt! # uint256
  currency: Bytes! # address
  roundDuration: BigInt! # uint40
  playersPerRound: Int! # uint8
  protocolFeeBp: Int! # uint16
  feeAmount: BigInt!
  roundsCount: BigInt! # uint256
  isActive: Boolean!
  "How much ETH this cave costs to operate"
  maintenanceCost: BigInt!
  rounds: [Round!]! @derivedFrom(field: "cave")
}

type Round @entity {
  "cave ID + round ID"
  id: ID!
  roundId: BigInt!
  cave: Cave!
  status: RoundStatus!
  loser: Player
  playersCount: BigInt!
  players: [PlayerRound!]! @derivedFrom(field: "round")
}

type Player @entity {
  "The player's address"
  id: ID!
  ensName: String
  looksWagered: BigInt!
  "The UTC timestamp of the las bet made by that player"
  lastBetTimestamp: BigInt
  ethWagered: BigInt!
  usdWagered: BigInt!
  looksWon: BigInt!
  ethWon: BigInt!
  usdWon: BigInt!
  looksLost: BigInt!
  ethLost: BigInt!
  usdLost: BigInt!
  "How much, in USD, is the player in profit/deficit"
  usdPnL: BigInt!
  "Network fees paid by the player to participate in rounds"
  feesPaidInETH: BigInt!
  feesPaidInUSD: BigInt!
  roundsWonCount: BigInt!
  roundsLostCount: BigInt!
  roundsEnteredCount: BigInt!
  roundsEntered: [PlayerRound!]! @derivedFrom(field: "player")
}

type PlayerDailyData @entity {
  "player's address + date"
  id: ID!
  player: Player!
  "Timestamp of the start of the UTC day"
  timestamp: BigInt!
  "PnL of that day"
  looksPnL: BigInt!
  ethPnL: BigInt!
  usdPnL: BigInt!
  roundsPlayed: BigInt!
  "Sum of the data saved in the previous and current days"
  cumulatedLooksPnL: BigInt!
  cumulatedEthPnL: BigInt!
  cumulatedUsdPnL: BigInt!
  cumulatedRoundsPlayed: BigInt!
}

type PlayerRound @entity {
  "player ID + cave ID + round ID"
  id: ID!
  player: Player!
  "Price in USD of the tokens ganbled in this round"
  usdWagered: BigInt!
  "Network fees paid to participate in this round. If several rounds are entered in the same transaction, they will share the same fees amount"
  feesPaidInETH: BigInt!
  feesPaidInUSD: BigInt!
  cave: Cave!
  round: Round!
  "Estimates of the Gems the player earned by completing the round"
  gemsEarned: BigInt!
}
